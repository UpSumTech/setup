#!/bin/bash

export PARENT_PID="$$"

VHOSTS_FILE_FROM_CONSUL=/tmp/nginx/vhosts/rails
VHOSTS_FILE_NORMALIZED_OLD=/tmp/nginx/vhosts/rails.old
VHOSTS_FILE_NORMALIZED_NEW=/tmp/nginx/vhosts/rails.new
VHOSTS_TEMPLATE_FILE=/tmp/nginx/vhosts/rails.jinja
VHOSTS_FILE=/etc/nginx/vhosts/rails.conf
CONSUL_SERVER_IP="$1"
NGINX_CONTAINER_NAME="$2"

die() {
  echo >&2 "Error: $@"
  kill -s TERM $PARENT_PID
  exit 1
}

validate() {
  which jq >/dev/null 2>&1
  [[ $? -eq 0 ]] || die "jq is not installed"

  which md5sum >/dev/null 2>&1
  [[ $? -eq 0 ]] || die "md5sum is not installed"

  [[ ! -z "$CONSUL_SERVER_IP" ]] || die "Consul server ip not provided"
}

prep() {
  [[ -f "$VHOSTS_FILE_FROM_CONSUL" ]] || > "$VHOSTS_FILE_FROM_CONSUL"
  > "$VHOSTS_FILE_NORMALIZED_OLD"
  > "$VHOSTS_FILE_NORMALIZED_NEW"
  > "$VHOSTS_FILE"
}

init() {
  local serviceQueryData="$(curl "$CONSUL_SERVER_IP:8500/v1/catalog/service/rails-server")"
  local address="$(echo "$serviceQueryData" | jq '.[0]["ServiceAddress"]' | sed -e "s#\"##g")"
  local name="$(echo "$serviceQueryData" | jq '.[0]["ServicePort"]' | sed -e "s#\"##g")"
  if [[ ! -z "$address" ]]; then
    echo "server $address:$port" > "$VHOSTS_FILE_NORMALIZED_NEW"
  fi
}

regenerateNewFile() {
  local service

  > "$VHOSTS_FILE_NORMALIZED_NEW"
  line="$(awk '/server/ {print "server " $2; exit}' "$VHOSTS_FILE_FROM_CONSUL")"
  echo "$line" > "$VHOSTS_FILE_NORMALIZED_NEW"
}

update() {
  local oldChksum
  local newChksum

  oldChksum="$(md5sum "$VHOSTS_FILE_NORMALIZED_OLD" | awk '{print $1}')"
  newChksum="$(md5sum "$VHOSTS_FILE_NORMALIZED_NEW" | awk '{print $1}')"
  if [[ "$newChksum" != "$oldChksum" ]]; then
    cp "$VHOSTS_FILE_NORMALIZED_NEW" "$VHOSTS_FILE_NORMALIZED_OLD"
    vhost_renderer.py --input_file="$VHOSTS_FILE_NORMALIZED_NEW" --output_file="$VHOSTS_FILE" --template_file="$VHOSTS_TEMPLATE_FILE"
    docker exec "$NGINX_CONTAINER_NAME" nginx -s reload
  fi
}

main() {
  validate
  prep
  init
  update

  local t1=$(stat -c %Z "$VHOSTS_FILE_FROM_CONSUL" | bc)
  local t2

  while : ; do
    t2=$(stat -c %Z "$VHOSTS_FILE_FROM_CONSUL" | bc)
    if [[ $t2 -ge $t1 ]]; then
      regenerateNewFile
      update
      t1=$t2
    fi
    sleep 10
  done
}

[[ "$BASH_SOURCE" == "$0" ]] && main
